//
//  ListNotesInteractor.swift
//  QNotes
//
//  Created by Meir Radnovich on 01/01/2020.
//  Copyright (c) 2020 Meir Radnovich. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListNotesBusinessLogic
{
  func fetchNote(request: ListNotes.FetchNote.Request)
  func fetchNotes(request: ListNotes.FetchNotes.Request)
  func createNote(request: ListNotes.CreateNote.Request)
  func recycleNote(request: ListNotes.RecycleNote.Request)
  func deleteNote(request: ListNotes.DeleteNote.Request)
  func restoreNote(request: ListNotes.RestoreNote.Request)
}

protocol ListNotesDataStore
{
  var folder: Folder { get set }
  var notes: [Note] { get }
}

class ListNotesInteractor: ListNotesBusinessLogic, ListNotesDataStore
{
  var presenter: ListNotesPresentationLogic?
  var folder = Folder.Inbox
  var worker = NotesWorker(store: NotesMemStore())
  var notes: [Note] = []
  
  // MARK: Do something
  
  func fetchNote(request: ListNotes.FetchNote.Request)
  {
  }
  
  func fetchNotes(request: ListNotes.FetchNotes.Request)
  {
    worker.fetchNotes(in: folder) { (notes: [Note]) in
      self.notes = notes.sorted(by: { $0.date > $1.date })

      let response = ListNotes.FetchNotes.Response(folder: self.folder, notes: self.notes)
      self.presenter?.presentFetchedNotes(response: response)
    }
  }
  
  func restoreNote(request: ListNotes.RestoreNote.Request)
  {
    guard let n = notes.first(where: {$0.id == request.id}) else
    {
      // TODO: Error handling
      return
    }
    
    // TODO: Multi-folder support
    worker.restoreNote(noteToRestore: n) { (note: Note?) in
      //      let response = ListNotes.RecycleNote.Response()
    }
  }
  
  func recycleNote(request: ListNotes.RecycleNote.Request)
  {
    guard let n = notes.first(where: {$0.id == request.id}) else
    {
      // TODO: Error handling
      return
    }
    
    worker.recycleNote(noteToRecycle: n, in: folder) { (note: Note?) in
//      let response = ListNotes.RecycleNote.Response()
    }
  }
  
  func deleteNote(request: ListNotes.DeleteNote.Request)
  {
    worker.deleteNote(id: request.id) { (note: Note?) in
      // TODO
    }
  }

  func createNote(request: ListNotes.CreateNote.Request)
  {
    let newNote = Note()
    
    // FIXME: Add support for other folders, remove hard-coded Inbox
    worker.createNote(noteToCreate: newNote, in: folder) { (note: Note?) -> Void in
      guard let n = note else
      {
        // TODO: Handle note creation failure
        return
      }
      
      self.notes.insert(n, at: 0)
      
      let response = ListNotes.CreateNote.Response(note: n)
      self.presenter?.presentCreatedNote(response: response)
    }
  }
}
