//
//  ListNotesViewController.swift
//  QNotes
//
//  Created by Meir Radnovich on 01/01/2020.
//  Copyright (c) 2020 Meir Radnovich. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListNotesDisplayLogic: class
{
  func displayFetchedNotes(viewModel: ListNotes.FetchNotes.ViewModel)
  func displayCreatedNote(viewModel: ListNotes.CreateNote.ViewModel)
}

class ListNotesViewController: UITableViewController, ListNotesDisplayLogic
{
  var interactor: ListNotesBusinessLogic?
  var router: (NSObjectProtocol & ListNotesRoutingLogic & ListNotesDataPassing)?
  var displayedNotes: [ListNotes.DisplayedNote] = []
  var isRecycling = false
  @IBOutlet var addNoteButton: UIBarButtonItem!
  
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListNotesInteractor()
    let presenter = ListNotesPresenter()
    let router = ListNotesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier
    {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector)
      {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    if !isRecycling
    {
      let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addNote(_:)))
      
      navigationItem.rightBarButtonItem = addButton
    }
  }
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    fetchNotesOnLoad()
  }
  
  // MARK: Do something
  
  func fetchNotesOnLoad()
  {
    let request = ListNotes.FetchNotes.Request()
    interactor?.fetchNotes(request: request)
  }
  
  func displayFetchedNotes(viewModel: ListNotes.FetchNotes.ViewModel)
  {
    DispatchQueue.main.async {
      self.title = viewModel.folderTitle
      self.displayedNotes = viewModel.displayedNotes
      self.tableView.reloadData()
    }
  }
  
  func displayCreatedNote(viewModel: ListNotes.CreateNote.ViewModel)
  {
    guard let dn = viewModel.displayedNote else
    {
      showErrorMessage(title: "Failed to Create Note", message: "Couldn't compose a new note at this time.") // FIXME: Show a real reason, reduce aggravationâ€¦
      return
    }

    displayedNotes.insert(dn, at: 0)
    tableView.reloadData()
    
    performSegue(withIdentifier: "ComposeNote", sender: nil)
  }
  
  @IBAction func addNote(_ sender: Any)
  {
    let request = ListNotes.CreateNote.Request()
    interactor?.createNote(request: request)
  }
  
  private func contextualRecycleAction(forRowAtIndexPath indexPath: IndexPath) -> UIContextualAction
  {
    let displayedNote = displayedNotes[indexPath.row]
    
    let action = UIContextualAction(style: .normal, title: NSLocalizedString("Move to Recycle Bin", comment: "")) { (contextualAction: UIContextualAction, view: UIView, completionHandler: @escaping (Bool) -> Void) in
      let request = ListNotes.RecycleNote.Request(id: displayedNote.id)
      self.interactor?.recycleNote(request: request)

      self.displayedNotes.remove(at: indexPath.row)
      self.tableView.deleteRows(at: [indexPath], with: .automatic)
      completionHandler(true)
    }
    
    action.backgroundColor = UIColor.systemBlue
    
    return action
  }
  
  private func contextualDeleteAction(forRowAtIndexPath indexPath: IndexPath) -> UIContextualAction
  {
    let displayedNote = displayedNotes[indexPath.row]
    
    let action = UIContextualAction(style: .destructive, title: NSLocalizedString("Delete", comment: "")) { (contextualAction: UIContextualAction, view: UIView, completionHandler: @escaping (Bool) -> Void) in
      let request = ListNotes.DeleteNote.Request(id: displayedNote.id)
      self.interactor?.deleteNote(request: request)
      
      self.displayedNotes.remove(at: indexPath.row)
      self.tableView.deleteRows(at: [indexPath], with: .automatic)
      completionHandler(true)
    }
    
    return action
  }
  
  private func contextualRestoreAction(forRowAtIndexPath indexPath: IndexPath) -> UIContextualAction
  {
    let displayedNote = displayedNotes[indexPath.row]
    
    let action = UIContextualAction(style: .normal, title: NSLocalizedString("Restore", comment: "")) { (contextualAction: UIContextualAction, view: UIView, completionHandler: @escaping (Bool) -> Void) in
      let request = ListNotes.RestoreNote.Request(id: displayedNote.id)
      self.interactor?.restoreNote(request: request)
        
      self.displayedNotes.remove(at: indexPath.row)
      self.tableView.deleteRows(at: [indexPath], with: .automatic)
      completionHandler(true)
    }
    
    action.backgroundColor = UIColor.systemGreen
    
    return action
  }
  
  // MARK: UITableViewDataSource and UITableViewDelegate methods
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return displayedNotes.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let cell = tableView.dequeueReusableCell(withIdentifier: "NoteCell", for: indexPath)
    
    let note = displayedNotes[indexPath.row]
    
    cell.textLabel?.text = note.title
    cell.detailTextLabel?.text = note.date
    
    return cell
  }
  
  override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
  {
    let action: UIContextualAction
    
    if isRecycling
    {
      action = contextualDeleteAction(forRowAtIndexPath: indexPath)
    }
    else
    {
      action = contextualRecycleAction(forRowAtIndexPath: indexPath)
    }

    return UISwipeActionsConfiguration(actions: [action])
  }
  
  override func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
  {
    guard isRecycling else
    {
      return nil
    }
    
    let action = contextualRestoreAction(forRowAtIndexPath: indexPath)
    return UISwipeActionsConfiguration(actions: [action])
  }
  
}
