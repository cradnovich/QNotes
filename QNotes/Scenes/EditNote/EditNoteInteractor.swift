//
//  EditNoteInteractor.swift
//  QNotes
//
//  Created by Meir Radnovich on 01/01/2020.
//  Copyright (c) 2020 Meir Radnovich. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditNoteBusinessLogic
{
  func openNote(request: EditNote.OpenNote.Request)
  func createNote(request: EditNote.CreateNote.Request)
  func updateNote(request: EditNote.UpdateNote.Request)
  func recycleNote(request: EditNote.RecycleNote.Request)
  func deleteNote(request: EditNote.DeleteNote.Request)
  func restoreNote(request: EditNote.RestoreNote.Request)
}

protocol EditNoteDataStore
{
  
  var note: Note? { get set }
}

class EditNoteInteractor: EditNoteBusinessLogic, EditNoteDataStore
{
  var presenter: EditNotePresentationLogic?
  var worker = NotesWorker(store: NotesFileStore())
  var note: Note?
  
  // MARK: Do something
  
  func openNote(request: EditNote.OpenNote.Request)
  {
    guard let n = note else
    {
      // TODO:
      return
    }
    
    let response = EditNote.OpenNote.Response(note: n)
    presenter?.presentNoteToEdit(response: response)
  }
  
  func createNote(request: EditNote.CreateNote.Request)
  {
    let newNote = Note()
    
    // FIXME: Add support for other folders, remove hard-coded Inbox
    worker.createNote(noteToCreate: newNote, in: Folder.Inbox) { (note: Note?) -> Void in
      self.note = note
      
      guard let n = note else
      {
        // TODO: Handle note creation failure
        return
      }
      
      let response = EditNote.OpenNote.Response(note: n)
      self.presenter?.presentNoteToEdit(response: response)
    }

  }
  
  func updateNote(request: EditNote.UpdateNote.Request)
  {
    guard let n = note else
    {
      // TODO: Figure out how this could be called when there isn't an active note.
      return
    }
    
    n.content = request.content
    
    // TODO: Multi-folder support
    worker.updateNote(noteToUpdate: n, in: Folder.Inbox) { (updatedNote: Note?) -> Void in
      self.note = updatedNote
      let response = EditNote.UpdateNote.Response(note: updatedNote)
      self.presenter?.presentUpdatedNote(response: response)
    }
  }
  
  func recycleNote(request: EditNote.RecycleNote.Request)
  {
    guard let n = note else
    {
      // TODO: Handle impossible condition
      return
    }
    
    // TODO: Multi-folder support
    worker.recycleNote(noteToRecycle: n, in: Folder.Inbox) { (recycledNote: Note?) -> Void in
//      self.note = recycledNote // Unneeded, because the editor will be dismissed
      let response = EditNote.RecycleNote.Response(note: recycledNote)
      self.presenter?.presentRecycledNote(response: response) // Nothing to present
    }
  }
  
  func deleteNote(request: EditNote.DeleteNote.Request)
  {
    guard let id = note?.id else
    {
      // TODO: Handle impossible condition
      return
    }
    
    worker.deleteNote(id: id) { (deletedNote: Note?) -> Void in
      let response = EditNote.DeleteNote.Response(note: deletedNote)
      self.presenter?.presentDeletedNote(response: response) // Nothing to present or do...
    }
  }

  func restoreNote(request: EditNote.RestoreNote.Request)
  {
    guard let n = note else
    {
      // TODO: Handle impossible condition
      return
    }
    
    worker.restoreNote(noteToRestore: n) { (restoredNote: Note?) -> Void in
      let response = EditNote.RestoreNote.Response(note: restoredNote)
      self.presenter?.presentRestoredNote(response: response)
    }
  }
  
}
