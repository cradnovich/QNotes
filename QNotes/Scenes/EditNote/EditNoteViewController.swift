//
//  EditNoteViewController.swift
//  QNotes
//
//  Created by Meir Radnovich on 01/01/2020.
//  Copyright (c) 2020 Meir Radnovich. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditNoteDisplayLogic: class
{
  func displayNoteToEdit(viewModel: EditNote.OpenNote.ViewModel)
}

class EditNoteViewController: UIViewController, EditNoteDisplayLogic
{
  var interactor: EditNoteBusinessLogic?
  var router: (NSObjectProtocol & EditNoteRoutingLogic & EditNoteDataPassing)?
  var isRecycling = false
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = EditNoteInteractor()
    let presenter = EditNotePresenter()
    let router = EditNoteRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    openNoteToEdit()
  }
  
  // MARK: Do something
  
  func openNoteToEdit()
  {
    let request = EditNote.OpenNote.Request()
    interactor?.openNote(request: request)
  }
  
  @IBOutlet var textView: UITextView!
  
  func saveNote(content: String)
  {
    let request = EditNote.UpdateNote.Request(content: content)
    interactor?.updateNote(request: request)
  }
  
  func displayNoteToEdit(viewModel: EditNote.OpenNote.ViewModel)
  {
    DispatchQueue.main.async {
      self.textView.text = viewModel.content
      self.title = viewModel.title
    }
  }
  
  @IBAction func composeOrRestore(_ sender: Any)
  {
    if isRecycling
    {
      let request = EditNote.RestoreNote.Request()
      interactor?.restoreNote(request: request)
    }
    else
    {
      let request = EditNote.CreateNote.Request()
      interactor?.createNote(request: request)
    }
  }
}

extension EditNoteViewController: UITextViewDelegate
{
  func textViewDidChange(_ textView: UITextView)
  {
    let request = EditNote.UpdateNote.Request(content: textView.text)
    interactor?.updateNote(request: request)
  }
}
